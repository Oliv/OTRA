<?phpfunction dev()	{	return isset($_SESSION['utilisateur']) && $_SESSION['utilisateur']['cle'] == 1;	}function init_prompteur()	{	if (!isset($_SESSION['prompteur'])) {$_SESSION['prompteur'] = array();}	}function ajout_prompteur($message,$type)	{	init_prompteur();	$_SESSION['prompteur'][$type] = isset($_SESSION['prompteur'][$type]) ? $_SESSION['prompteur'][$type] : "";	$_SESSION['prompteur'][$type] .= $message;	}function lit_prompteur($type = false)	{	if ($type)		{		if (isset($_SESSION['prompteur'][$type]))			{			return $_SESSION['prompteur'][$type] != "" ? $_SESSION['prompteur'][$type] : false;			}		else			{			return false;			}		}	else		{		return $_SESSION['prompteur'];		}	}	function vide_prompteur($type = false)	{	$_SESSION['prompteur'] = array();	}function message($info = false)	{	if ($info)		{		ajout_prompteur($info,'message');		}	else		{		return lit_prompteur('message');		}	}function erreur($info = false)	{	if ($info)		{		ajout_prompteur($info,'erreur');		}	else		{		return lit_prompteur('erreur');		}	}function mysql_encode($texte) // encode le texte pour l'injecter dans une requete sql	{	$texte = str_replace("'","''",$texte);	$texte = str_replace('\\',"\\\\",$texte);	return $texte;	}	function input_value($texte)	{	return htmlentities(stripslashes($texte), ENT_QUOTES, "UTF-8");	}function zero_fill($nombre,$taille_totale)	{	if ($nombre !== false)		{		return substr(str_repeat('0',$taille_totale).$nombre,-$taille_totale);		}	else		{		return false;		}	}	function sql_compress($str)	{	return strtolower(str_replace(" ","",$str));	}function classes($projet = false)	{	$dir = $projet ? "projets/".$projet.".php" : "projets/admin.php" ;	preg_match_all("#class ([a-z0-9_]*)#i",file_get_contents(root.$dir),$results);	return $results[1];	}function classes_et_methodes($projet)	{	static $projets = array();	if (isset($projets[$projet]))		{		$retour = $projets[$projet];		}	else		{		$retour = array();		$code = file_get_contents(root."projets/".$projet.".php");		$code = preg_replace('#class ([a-z0-9_]*)#i','class '.$projet.'_$1',$code);		$code = str_replace(array('<?php','?>'),"",$code);		eval($code);		$classes = classes($projet);		foreach ($classes as $c)			{			$retour[$c] = array();			$classe = $projet."_".$c;			$methodes = $classe :: methodes_visibles();			foreach ($methodes['statique'] as $m)				{ array_push($retour[$c],$m); }			foreach ($methodes['instance'] as $m)				{ array_push($retour[$c],$m); }			}		$projets[$projet] = $retour;		}	return $retour;	}function types()	{	$dir = "core/types.php";	preg_match_all("#class ([a-z0-9_]*)#i",file_get_contents(root.$dir),$results);	return $results[1];	}	function accueil()	{	if (isset($_SESSION['utilisateur']['cle']))		{		header('Location:http://home.'.domaine);		}	else		{header('Location:http://login.'.domaine);}		}function mime_type($filename) 	{	$mime_types = array(		'txt' => 'text/plain',		'htm' => 'text/html',		'html' => 'text/html',		'php' => 'text/html',		'css' => 'text/css',		'js' => 'application/javascript',		'json' => 'application/json',		'xml' => 'application/xml',		'swf' => 'application/x-shockwave-flash',		'flv' => 'video/x-flv',		// images		'png' => 'image/png',		'jpe' => 'image/jpeg',		'jpeg' => 'image/jpeg',		'jpg' => 'image/jpeg',		'gif' => 'image/gif',		'bmp' => 'image/bmp',		'ico' => 'image/vnd.microsoft.icon',		'tiff' => 'image/tiff',		'tif' => 'image/tiff',		'svg' => 'image/svg+xml',		'svgz' => 'image/svg+xml',		// archives		'zip' => 'application/zip',		'rar' => 'application/x-rar-compressed',		'exe' => 'application/x-msdownload',		'msi' => 'application/x-msdownload',		'cab' => 'application/vnd.ms-cab-compressed',		// audio/video		'mp3' => 'audio/mpeg',		'qt' => 'video/quicktime',		'mov' => 'video/quicktime',		// adobe		'pdf' => 'application/pdf',		'psd' => 'image/vnd.adobe.photoshop',		'ai' => 'application/postscript',		'eps' => 'application/postscript',		'ps' => 'application/postscript',		// ms office		'doc' => 'application/msword',		'rtf' => 'application/rtf',		'xls' => 'application/vnd.ms-excel',		'ppt' => 'application/vnd.ms-powerpoint',		// open office		'odt' => 'application/vnd.oasis.opendocument.text',		'ods' => 'application/vnd.oasis.opendocument.spreadsheet',	);	$ext = explode('.',$filename);	$ext = strtolower(array_pop($ext));	if (array_key_exists($ext, $mime_types)) 		{		return $mime_types[$ext];		}	elseif (function_exists('finfo_open')) 		{		$finfo = finfo_open(FILEINFO_MIME);		$mimetype = finfo_file($finfo, $filename);		finfo_close($finfo);		return $mimetype;		}	else 		{		return 'application/octet-stream';		}	}function a_le_droit($objet, $methode = false)	{	$retour = false;	if (cron)		{		return true;		}	elseif (projet=='login')		{		$retour = true;		}	elseif ( projet=='home' && isset($_SESSION['utilisateur']) )		{		$retour = true;		}	elseif(est_admin())		{		$retour = true;		}	elseif (!$methode && $objet :: $methodes_publiques !== false)		{		$retour = true;		}	elseif (is_array($objet :: $methodes_publiques) && in_array($methode,$objet :: $methodes_publiques))		{		$retour = true;		}	elseif (isset($_SESSION['utilisateur']['projets'][projet]['droits'][$objet]))		{		$retour = !$methode || in_array($methode,$_SESSION['utilisateur']['projets'][projet]['droits'][$objet]);		}	else		{		$retour = false;		}		return $retour;	}	function est_admin()	{	// return projet=='admin' && isset($_SESSION['utilisateur']['projets']['admin']);	return isset($_SESSION['utilisateur']['projets']['admin']);	}function extention($path)	{	$path = explode('.',$path);	return strtolower($path[count($path)-1]);	}function est_au_debut_de($test,$texte)		{	return substr($texte,0,strlen($test)) == $test;	}function pass_encode($texte) // encodage du mot de passe	{	$md5 = md5($texte);	$sha1 = sha1($texte);	$retour="";	for ($i = 0; $i < strlen($md5); $i++)		{		$retour .= $sha1[$i];		$retour .= $md5[$i];		}	$retour .= substr($sha1,$i);	return $retour;	}function image_action($m)	{	if (true)		{		switch($m)			{			case 'Supprimer' : $c = "fontawesome-remove-sign" ; break;			case 'Calendrier' : $c = "fontawesome-calendar" ; break;			case 'Envoyer_par_mail' : $c = "fontawesome-envelope-alt" ; break;			case 'Install' : $c = "fontawesome-cog" ; break;			case 'Liste' : $c = "fontawesome-list" ; break;			case 'Modifier' : $c = "fontawesome-pencil" ; break;			case 'Nouveau' : $c = "fontawesome-plus" ; break;			case 'Rechercher' : $c = "fontawesome-search" ; break;			case 'References' : $c = "fontawesome-link" ; break;			case 'connect' : $c = "fontawesome-cogs" ; break;			case 'non' : $c = "fontawesome-remove" ; break;			case 'notes' : $c = "fontawesome-edit" ; break;			case 'oui' : $c = "fontawesome-ok" ; break;			case 'outils' : $c = "fontawesome-wrench" ; break;			case 'reload' : $c = "fontawesome-retweet" ; break;			default : $c = 'fontawesome-th-large'; break;			}		$retour = "<span class=\"".$c."\" title=\"".$m."\"></span>";		}	else		{		$img = is_file(root."www/icones/".$m.".png") ? "/icones/".$m.".png" : "/icones/defaut.png";		$retour = "<img class='icone' src='".$img."' title='".str_replace(array('__','_'),array(' / ',' '),$m)."' alt='".str_replace(array('__','_'),array(' / ',' '),$m)."'>";		}	return $retour;	}	function coupe($txt,$len)	{	$retour = "";	$txt = utf8_decode($txt);	while ( strlen($txt) > $len )		{		$retour .= $retour == "" ? "" : "\n ";		$retour .= substr($txt,0,$len-1);		$txt = substr($txt,$len-1);		}	$retour .= $retour == "" ? "" : "\n ";	$retour .= $txt;	$retour = utf8_encode($retour);	return $retour;	}	function aff_utilisateur($cle)	{	global $bdd_adm;	$retour = $bdd_adm -> read("select prenom,nom from `opt_Utilisateur` where cle=".$cle);	return $retour[0]['prenom']." ".$retour[0]['nom'];	}function ajax()	{	$retour = "";	static $est_deja_inclus = false;	if (!$est_deja_inclus)		{		$retour .= "<script type='text/javascript' src='ajax.js'></script>";		$est_deja_inclus = true;		}	return $retour;	}function stripAccents($string) // enlève les accents de la chaine de caractères	{	$t['Ý'] = 'Y';	$t['Ü'] = 'U';	$t['Û'] = 'U';	$t['Ú'] = 'U';	$t['Ù'] = 'U';	$t['Ö'] = 'O';	$t['Õ'] = 'O';	$t['Ô'] = 'O';	$t['Ó'] = 'O';	$t['Ò'] = 'O';	$t['Ñ'] = 'N';	$t['Ï'] = 'I';	$t['Î'] = 'I';	$t['Í'] = 'I';	$t['Ì'] = 'I';	$t['Ë'] = 'E';	$t['Ê'] = 'E';	$t['É'] = 'E';	$t['È'] = 'E';	$t['Ç'] = 'C';	$t['Ä'] = 'A';	$t['Ã'] = 'A';	$t['Â'] = 'A';	$t['Á'] = 'A';	$t['À'] = 'A';	$t['ÿ'] = 'y';	$t['ý'] = 'y';	$t['ü'] = 'u';	$t['û'] = 'u';	$t['ú'] = 'u';	$t['ù'] = 'u';	$t['ö'] = 'o';	$t['õ'] = 'o';	$t['ô'] = 'o';	$t['ó'] = 'o';	$t['ò'] = 'o';	$t['ñ'] = 'n';	$t['ï'] = 'i';	$t['î'] = 'i';	$t['í'] = 'i';	$t['ì'] = 'i';	$t['ë'] = 'e';	$t['ê'] = 'e';	$t['é'] = 'e';	$t['è'] = 'e';	$t['ç'] = 'c';	$t['ä'] = 'a';	$t['ã'] = 'a';	$t['â'] = 'a';	$t['á'] = 'a';	$t['à'] = 'a';	foreach ($t as $old => $new)		{		$string = str_replace($old,$new,$string);		}	return $string;	}function like($expression,$chaine)	{	$chaine = stripAccents($chaine);	$expression = stripAccents($expression);	return stripos($chaine,$expression) !== false;	}function test()	{	if (isset($_SESSION['utilisateur']) && $_SESSION['utilisateur']['cle'] == 1)		{		return true;		}	else		{		return false;		}	}function sommaire(&$txt)	{	preg_match_all('#<h([1-6]).*>(.*)</h#Ui',$txt,$titres);	$retour = "<div class='sommaire' id='sommaire'>";	if ($titres && count($titres[0])>0)		{		$init = min($titres[1])-1;		$act = $init;		foreach ($titres[0] as $k => $balises)			{			$lvl = $titres[1][$k];			if ($act == $lvl)				{	$retour .= "</li><li>";	}			elseif ($act < $lvl)				{	$retour .= str_repeat("<ul><li>",$lvl-$act);	}			elseif ($act > $lvl)				{	$retour .= str_repeat("</li></ul></li>",$act-$lvl)."<li>";	}			$ancre = preg_replace('#[^a-z0-9]*#Ui','',stripaccents($titres[2][$k]));			$txt = str_ireplace($titres[0][$k],"<h".$titres[1][$k]." id='".$ancre."'>".$titres[2][$k]." <a href='#sommaire'>&uarr;</a></h",$txt);			$retour .= "<a href='#".$ancre."'>".$titres[2][$k]."</a>";			$act = $lvl;			}					$retour .= str_repeat("</li></ul>",$act-$init);		$retour .= "</div>";				}	return $retour;	}	function form_ajout_raccourci()	{	static $renvoye = false;	$retour = "";	if (!$renvoye)		{		$renvoye = true;		if ($_SESSION['ajout_historique'] !== false)			{			// affichage des actions possibles sur cette page			// ligne du dessous tres crade, a modifier avec une regex pour virer si 2 fois historique dans l'url			$retour .= "<form method='post' action='".$_SERVER['REQUEST_URI']."&historique=".$_SESSION['ajout_historique']."'>";			$retour .=  "<fieldset class='ajout_raccourci'>";			$retour .=  "<legend>Raccourcis</legend>";			$retour .=  "<label for='ajout_raccourci'>Enregistrer cette page en raccourci : </label> ";			$champ = new texte_simple('ajout_raccourci');			$retour .=  $champ -> form();			$retour .=  "<input type='submit' value='Ajouter'>";			$retour .=  "</fieldset>";			$retour .=  "</form>";			}		}	return $retour;	}	function tableau_pays()	{	global $bdd_adm;	static $tableau_retour = array();		if (empty($tableau_retour))		{		$tableau_retour = $bdd_adm -> read("select `code`, `name_country` from country order by name_country",'code','name_country');		}		return $tableau_retour;	}function parametre_utilisateur($param)	{	global $bdd_adm;		static $parametres = array();		if (!isset($parametres[$param]))		{		$parametre = opt_Parametre::lister($bdd_adm,"`identifiant` = '".$param."'");		$parametre = $parametre[0];			if (isset($_SESSION['utilisateur']))			{			$reponses_possibles = $bdd_adm->read("select cle, valeur from opt_Parametre_Reponse where parametre = ".$parametre['cle'], 'cle', 'valeur');							$projet = $bdd_adm -> read("select cle from `opt_Projet` where `fichier` = '".projet."'");			$projet = count($projet)>0 ? $projet = $projet[0]['cle'] : false;						$profil = isset($_SESSION['utilisateur']['profil']) ? $_SESSION['utilisateur']['profil'] : false;						$retour = false;			$debut_requete = "`utilisateur` = ".$_SESSION['utilisateur']['cle']." and `parametre` = ".$parametre['cle'];						if ($projet && $profil)				{				$parametres = opt_Parametre_Utilisateur::lister($bdd_adm, $debut_requete." and `projet` = '".$projet."' and `profil` = '".$profil."'");				if (count($parametres)>0) { $retour = $parametres[0]['reponse']; }				}			if (!$retour && $projet)				{				$parametres = opt_Parametre_Utilisateur::lister($bdd_adm, $debut_requete." and `projet` = '".$projet."' and `profil` is null");				if (count($parametres)>0) { $retour = $parametres[0]['reponse']; }				}			if (!$retour && $profil)				{				$parametres = opt_Parametre_Utilisateur::lister($bdd_adm, $debut_requete." and `profil` = '".$profil."' and `projet` is null");				if (count($parametres)>0) { $retour = $parametres[0]['reponse']; }				}			if (!$retour)				{				$parametres = opt_Parametre_Utilisateur::lister($bdd_adm, $debut_requete." and `profil` is null and `projet` is null");				if (count($parametres)>0) { $retour = $parametres[0]['reponse']; }				}			if (!$retour)				{				$retour = $parametre['valeur_defaut'];				}			elseif (isset($reponses_possibles[$retour]))				{				$retour = $reponses_possibles[$retour];				}			}		else			{			$retour = $parametre['valeur_defaut'];			}		$parametres[$param] = $retour;		}	return $parametres[$param]; 	}function css2recarray($css)	{	$final = array();	$position_actuelle = array();		while (strlen($css)>0)		{		$nextopen = strpos($css,"{");		$nextclose = strpos($css,"}");						if ($nextopen === false && $nextclose === false)			{			$css = "";			}		else			{			$nextopen = $nextopen === false ? $nextclose + 1 : $nextopen;			$nextclose = $nextclose === false ? $nextopen + 1 : $nextclose;						if ($nextopen < $nextclose)				{				array_push($position_actuelle,trim(substr($css,0,$nextopen)));				$css = substr($css,$nextopen+1);				}			else				{				$contenu = trim(substr($css,0,$nextclose));				$css = substr($css,$nextclose+1);				if (trim($contenu)!="")					{					$tab = explode(";",$contenu);					$proprietes = array();					foreach ($tab as $t)						{						if (trim($t)!="")							{							$p = explode(":",$t);							$proprietes[$p[0]] = $p[1];							}						}										$contenu = $proprietes;										for ($i = count($position_actuelle)-1; $i >= 0; $i--)						{						$tmp = array();						$tmp[$position_actuelle[$i]] = $contenu;						$contenu = $tmp;						}					$final = array_merge_recursive($final,$contenu);					}									unset($position_actuelle[count($position_actuelle)-1]);				$position_actuelle = array_filter($position_actuelle);				}			}		}	return $final;	}function css2array($css)	{	$final = array();	$position_actuelle = array();		while (strlen($css)>0)		{		$nextopen = strpos($css,"{");		$nextclose = strpos($css,"}");						if ($nextopen === false && $nextclose === false)			{			$css = "";			}		else			{			$nextopen = $nextopen === false ? $nextclose + 1 : $nextopen;			$nextclose = $nextclose === false ? $nextopen + 1 : $nextclose;						if ($nextopen < $nextclose)				{				array_push($position_actuelle,trim(substr($css,0,$nextopen)));				$css = substr($css,$nextopen+1);				}			else				{				$contenu = trim(substr($css,0,$nextclose));				$css = substr($css,$nextclose+1);				if (trim($contenu)!="")					{					$tab = explode(";",$contenu);					$proprietes = array();					foreach ($tab as $t)						{						if (trim($t)!="")							{							$p = explode(":",$t);							$proprietes[$p[0]] = $p[1];							}						}										$contenu = $proprietes;										$final[implode("{",$position_actuelle)] = $contenu;					// $final = array_merge_recursive($final,$contenu);					}									unset($position_actuelle[count($position_actuelle)-1]);				$position_actuelle = array_filter($position_actuelle);				}			}		}	return $final;	}function change_couleurs($css,$couleur_cible,$ref = false)	{	$css = preg_replace("#\s+#"," ",$css);		$css = css2array($css);	$final = "";	foreach ($css as $chem => $proprietes)		{		foreach ($proprietes as $k => $p)			{			if(trim($p)!="")				{				preg_match_all("#(\#[0-9A-F]{3,6})#is",$p,$test);				if(count($test[0])>0)					{					foreach ($test[0] as $n => $c)						{						$color = $test[1][$n];						if (strlen($color)==4)							{							$color = "#".substr($color,1,1).substr($color,1,1).substr($color,2,1).substr($color,2,1).substr($color,3,1).substr($color,3,1);							}						if (false && dev())							{							$final .= $chem."{ ".$k.":".str_replace($test[1][$n],couleur::invert(couleur::tocolor($color,$couleur_cible,$ref)),$p).";}\n";							}						else							{							$final .= $chem."{ ".$k.":".str_replace($test[1][$n],couleur::tocolor($color,$couleur_cible,$ref),$p).";}\n";							}						}					}				}			}		}	return $final;	}function mailto($contenu_lien,$adresse,$titre=false,$contenu_mail=false)	{	$retour = "";	$retour .= "<a href=\"mailto:".$adresse;	if ($titre)		{		$retour .= "?subject=".$titre;		if ($contenu_mail)			{			$retour .= "&body=".str_replace(array("\n","&"),array("%0A","%26"),$contenu_mail);			}		}	$retour .= "\">".$contenu_lien."</a>";	return $retour;	}?>